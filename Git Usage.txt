1.安装Git
Linux：sudo apt-get install git；
Windows：Git官网下载Git，然后进行安装；

2.配置：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

3.创建版本库：.git
$ mkdir Myrepository
$ cd Myrepository
$ git init
在此目录下会建立一个.git目录，千万不要乱改里面内容！！！

4.添加文件到版本库
$ git add 'Git Usage.txt'
$ git commit -m "Git Usage initial file."

5.只要文件修改，文件状态都会发生变化
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   Git Usage.txt

6.查看文件变化
$ git diff 'Git Usage.txt'

7.查看变化日志
$ git log --pretty=oneline 'Git Usage.txt'
4243ec3ada0e4c34e58ec9033eb258af72919438 (HEAD -> master) Git Usage append from 6...
1eae1aecf856c2c8a443d7abf025fb13ac01aca6 Git Usage append from 5...
1f4c5d4fec4547d098c40c71c877b2b3a1d25c25 Git Usage initial file.
（Git不是按照1、2、3..来生成版本号的，原因是在分布式系统中，这样生成版本号容易重复，
而是SHA1计算出来的一个非常大的数字，用十六进制表示，一般我们查看版本只需要前六位即可）

8.回退操作：git reset --hard commit_id

9.查看历史操作：git reflog （以确定回到那个历史版本）

10.Git的分区概念：
工作区（Working Directory）：就是目录Myrepository；
版本库（Repository）：工作区里面有个隐藏的目录（.git），就是版本库；
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD；
我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。git

11.撤销版本文件
a)如果没有执行:git add命令，直接checkout，git checkout -- 'Git Usage.txt',（注意一定要有--）
b)如果已经执行:git add命令，则需要：
git reset HEAD 'Git Usage.txt'
git checkout -- 'Git Usage.txt'
(可以用git status 查看状态）

12.删除文件
a）如果仅删除工作区文件，确认是误删后，可以用git checkout -- 恢复；
b）确实要删除版本库中的文件，先(1)git rm <filename>...,(2)git commit -m 'Reason for removing'

13.推送至远程库
有两种模式：1）自己搭建一远程服务器；2）利用GitHub创建一个远程库；
先说第2）种模式：
a）本地生成密钥和公钥：ssh-keygen -t rsa -C "lgd405@hotmail.com"，依据提示操作（一般一路回车）；
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
b）登陆GitHub，打开“Account settings”，“SSH Keys”页面：点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容；
c）在GitHub上创建一个仓库，如Myrepository；
$ git remote add origin https://github.com/lgd405/Myrepository.git或git remote add origin git@github.com:lgd405/Myrepository.git
$ git push -u origin master（按照提示进行操作，初次必须用-u选项）
Enumerating objects: 35, done.
Counting objects: 100% (35/35), done.
Delta compression using up to 4 threads
Compressing objects: 100% (30/30), done.
Writing objects: 100% (35/35), 19.69 KiB | 1.79 MiB/s, done.
Total 35 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), done.
To https://github.com/lgd405/Myrepository.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
d）以后每当本地库发生改变，仅需：git push origin master，即可推送至远程库；

14.克隆远程版本库：$ git clone git@github.com:lgd405/Myrepository.git
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

15.分支管理
a)创建切换分支：
$ git branch dev (创建分支）
$ git checkout dev （切换分支到dev）
b)合并、删除分支
$ git checkout master （切换分支到master）
$ git merge dev        （合并dev分支到master）
$ git branch -d dev     （删除分支dev）  
$ git push origin master （推送至远程）
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
c)解决分支冲突

Creating a new branch is quick & simple.






