1.安装Git
Linux：sudo apt-get install git；
Windows：Git官网下载Git，然后进行安装；

2.配置：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

3.创建版本库：.git
$ mkdir Myrepository
$ cd Myrepository
$ git init
在此目录下会建立一个.git目录，千万不要乱改里面内容！！！

4.添加文件到版本库
$ git add 'Git Usage.txt'
$ git commit -m "Git Usage initial file."

5.只要文件修改，文件状态都会发生变化
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   Git Usage.txt

6.查看文件变化
$ git diff 'Git Usage.txt'

7.查看变化日志
$ git log --pretty=oneline 'Git Usage.txt'
4243ec3ada0e4c34e58ec9033eb258af72919438 (HEAD -> master) Git Usage append from 6...
1eae1aecf856c2c8a443d7abf025fb13ac01aca6 Git Usage append from 5...
1f4c5d4fec4547d098c40c71c877b2b3a1d25c25 Git Usage initial file.
（Git不是按照1、2、3..来生成版本号的，原因是在分布式系统中，这样生成版本号容易重复，
而是SHA1计算出来的一个非常大的数字，用十六进制表示，一般我们查看版本只需要前六位即可）

8.回退操作：git reset --hard commit_id

9.查看历史操作：git reflog （以确定回到那个历史版本）

10.Git的分区概念：
工作区（Working Directory）：就是目录Myrepository；
版本库（Repository）：工作区里面有个隐藏的目录（.git），就是版本库；
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD；
我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。git

11.撤销版本文件
a)如果没有执行:git add命令，直接checkout，git checkout -- 'Git Usage.txt',（注意一定要有--）
b)如果已经执行:git add命令，则需要：
git reset HEAD 'Git Usage.txt'
git checkout -- 'Git Usage.txt'
(可以用git status 查看状态）

12.删除文件
a）如果仅删除工作区文件，确认是误删后，可以用git checkout -- 恢复；
b）确实要删除版本库中的文件，先(1)git rm <filename>...,(2)git commit -m 'Reason for removing'

13.推送至远程库
有两种模式：1）自己搭建一远程服务器；2）利用GitHub创建一个远程库；
先说第2）种模式：
a）本地生成密钥和公钥：ssh-keygen -t rsa -C "lgd405@hotmail.com"，依据提示操作（一般一路回车）；
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
b）登陆GitHub，打开“Account settings”，“SSH Keys”页面：点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容；
c）在GitHub上创建一个仓库，如Myrepository；
$ git remote add origin https://github.com/lgd405/Myrepository.git或git remote add origin git@github.com:lgd405/Myrepository.git
$ git push -u origin master（按照提示进行操作，初次必须用-u选项）
Enumerating objects: 35, done.
Counting objects: 100% (35/35), done.
Delta compression using up to 4 threads
Compressing objects: 100% (30/30), done.
Writing objects: 100% (35/35), 19.69 KiB | 1.79 MiB/s, done.
Total 35 (delta 9), reused 0 (delta 0)
remote: Resolving deltas: 100% (9/9), done.
To https://github.com/lgd405/Myrepository.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.
d）以后每当本地库发生改变，仅需：git push origin master，即可推送至远程库；

14.克隆远程版本库：$ git clone git@github.com:lgd405/Myrepository.git
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

15.分支管理
a)创建切换分支：
$ git branch dev (创建分支）
$ git checkout dev （切换分支到dev）
b)合并、删除分支
$ git checkout master （切换分支到master）
$ git merge dev        （合并dev分支到master）
$ git branch -d dev     （删除分支dev）  
$ git push origin master （推送至远程）
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>
c)解决分支冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
可以用以下命令查看分支合并图。
$ git log --graph --pretty=oneline --abbrev-commit
d)分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。时
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward模式（默认）合并就看不出来曾经做过合并。
$ git merge --no-ff -m "merge with no-ff" dev
e)Bug分支
软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交，并不是你不想提交，
而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
（1）$ git stash （把当前分支状态暂存起来）
（2）确定在从那个分支修改（如master ，$ git checkout master）
（3）创建一个Bug分支（如$ git checkout -b issue-101）
（4）修改后，合并分支（如$ git checkout master；$ git merge --no-ff -m "merged bug fix 101" issue-101）
（5）返回原来分支（如$ git checkout dev）
（6）查看工作现场（$ git stash list）
（7）恢复工作现场：一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了。
（8）你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：$ git stash apply stash@{0}
f）Feature分支
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
g）多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
要查看远程库的信息，用git remote -v显示更详细的信息。
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上，如：
$ git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！
查看远程库信息，使用git remote -v；

多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。








